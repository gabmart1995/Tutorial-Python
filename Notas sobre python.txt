Notas sobre python

Python es un lenguaje de programacion poderoso orientado a objetos, pero debes tener algunas
consideraciones

1.- NO EXISTE PUNTO Y COMA: para separar instruciones se continua a la siguiente
linea, solo de utiliza para separar instrucciones dentro de la misma lineas
2.- OJO CON LA IDENTACION: este es un lenguaje fuertemente tipado y reconoce los 
saltos de linea dentro del codigo.
3.- SublimeREPL: es el paquete especializado para el sintaxis de python descargalo.
4.- Tipos de datos: Numericos (enteros, float, complejos), textos, booleanos.
5.- Operadores: mira la imagen JPG del video 4
6.- La triple comilla puede utiizarse para contener mensaje dentro de variables.
7.- Sintaxis de una funcion en Python

def nombre_funcion( parametros ):
	instrucciones ...
	return (opcional)

8.- ejecucion:

	nombre_funcion()

9.- Sintaxis de las listas

	nombreLista = [ elem1, elem2, elem3, ... ]

	Recuerda que existe un indice que muestra la posicióny el 0 corresponde al primer elemento

10.- Nota evita los acentos Python no los reconoce y genera un error de compilación
11.- Recuerda los valores booleanos tiene la primera letra en mayuscula True o False

12.- las tuplas son elementos inmutables, no se modifican despues de su creación.
Son más rapidas, menor espacio en memoria y pueden utilizarse como las claves de
un diccionario.

Sintaxis 

	nombreTupla = ( elem1, elem2, elem3, ... )

13.- Para tomar los datos por teclado en Python se utiliza la funcion input para enviar los 
datos por teclado, por defecto los datos que entran por teclado son considerados strings 
por los que hay que parsear los datos antes de validar.

14.- IMPORTANTE en la version 2 de python para almacenar datos dentro de las variables
como cadenas se utiliza la funcion raw_input permite alojar cadenas de texto dentro de
las mismas. Input solo permite obtiener solo un dato. Ademas debes de parsear los datos
constantemente para saber que estas utilizando

15.- Python puede utilizar operaciones de operadores de comparacion de forma encadenada
para evualuar en una sola condicion sin utilizar el switch

16: lower() y upper() permite tomar los valores string y volverlos mayusculas o minusculas

17.- Los bucles pueden ser de 2 tipos: determinados e indeterminados la diferencia
entre ellos es la cantidad de veces que se ejecutan.

18.- Investigar sobre el uso de variables locales y globales es muy fuerte en ese aspecto

19: Generadores: son estructuras que extraen valores de una función y se almacenan 
en objetos iterables. -> se almacenan de uno en uno -> aplica un suspencion de
estado

. Muy útiles con listas de valores infinitos siempre devuelve de uno en uno

20: yield from: simplifica el codigo en los generadores en caso de usar bucles
anidados

21: Excepciones: son errores en tiempo de ejecución la sintaxis del codigo es correcta pero durante la ejecución ocurre algo inesperado.

22: Se puede construir excepciones personalizadas para el control de las actividades dentro del try - catch. usando la palabra Raise

23: POO: programacion orientada a objetos. cuando se contruyen metodos es obligatorio colocar el parametro self que hace referencia a la clase

24: herencia: es un termino importante en la programación permiten utilizar atributos y metodos de otras clases, cumple con la reutilizacion de código. Python puede utilizar 
herencia multiple

Cuando sobreescribes una funcion siempre se ejecuta el valor de la clase hija. y hereda
sus atributos y metodos 

Super(): Llama a un atributo o metodo de la clase padre. existe una funcion en Python que
indica que un elemento pertenece a una instancia determinada.

25.- Cadenas de caracteres objetos string tienen sus propiedades y metodos permiten validar
cadenas

26.- Se separa todo en modulos que permiten la reutilizacion del codigo en Python. Conectados 
a traves de paquetes, sirviendo para almacenar modulos relacionados entre sí. Para crearlo
se necesita crear un archivo llamado __init__.py QUE NO SE TE OLVIDE 

27.- Paquetes distribuibles: se pueden crear paquetes que permiten el desarrollo de nuevas
funciones y se permiten instalar este paquete en Python ver archivo setup

comando  python3 setup.py sdist recuerda  instalar el modulo 
apt-get install python3-pip 

Ademas para instalar el paquete usa el coamndo siguiente como administrador.
pip3 install nombre_de_paquete.zip
pip3 uninstall nombre_de_paquete

ATENCION: mucho cuidado con la sintaxis del archivo setup.py porque sino los 
componentes no se importaran

los archivos se importaran en el siguiente PATH = '/usr/local/lib/python3.4/dist-packages'

28.- Archivos externos: esta seccion se habla sobre la persistencia de datos existen 2
formas : archivos externos y bases de datos

fases de manipulacion de archivos

creacion -> apertura -> manipulacion -> cierre

Modos de apertura de archivos

	lectura = r
	escritura = w
	append = a  ( permite agregar informacion en un archivo que ya existe )

29.- Serialización es el proceso de construccion de archivos de codigo binario,
para distrubuir más facilmente a nivel mundial. Se utiliza una biblioteca 
llama pickle que utiliza 2 metodos dump y load

dump(): volcado de datos al archivo binario
load(): carga de datos del binario externo

30.- Interfaces graficas: recuerda instalar el paquete python3-tk para emular los
paquetes. apt-get python3-tk

31.- Existen multitudes de componentes para la conexion de Bases de datos en Python 
SqlLite, Mysql, Postgresql etc.

32.- las funciones lambda permiten crear funciones de codigo que pueden retornar
valores en una linea de codigo

33.- La funcion filter forma parte de un grupo de funciones que se denomina funciones
de orden superior y nos permite utilizar un paradigma nuevo conocido como programación
funcional. Verifica los elementos de una secuencia cumplen una condicion devolviendo un 
iterador que cumplen con dicha condicion

34.- Map: aplica una funcion a cada elemento de la lista iterable devolviendo una lista
con los resultados

